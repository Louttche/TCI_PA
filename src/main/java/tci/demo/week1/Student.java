package tci.demo.week1;

import java.util.List;

/**
 * A student is identified by studentNumber and name.
 * A student gets semester number 1 when enrolled for the first time (e.g., new regular bachelor students).
 * studentnumber never changes. the name can change.
 * Students can have a mentor, which can be changed later.
 * semesters range from 1..8
 * with a unique student number, consisting of 5 digits.
 */

public class Student {

    private static Integer studentNumber; // consisting of 5 digits
    private String firstName;
    private Integer currentSemester; // range from 1..8
    public String studentMentor;

    private List<Course> passedCourses;


    /**
     * Constructor which sets fields for studentNumber and firstName. Field semester is set to 1.
     * Should be used when student is enrolled in the first semester (e.g., regular bachelor students).
     *
     * @param studentNumber student number of 5 digits.
     * @param name     full name of the student, e.g., Joe van der Smith
     * @throws IllegalArgumentException Exception is thrown if studentNumber is not a positive 5-digits integer,
     *                                  or semester is not in range [1..8].
     *
     * @should throw IllegalArgumentException if studentNumber is negative
     * @should throw IllegalArgumentException if studentNumber is not 5 digits
     * @should throw IllegalArgumentException if semester is not in range 1 to 8
     */
    public Student(int studentNumber, String name, int sem) throws IllegalArgumentException {
        if (studentNumber < 0)
            throw new IllegalArgumentException("Student Number can't be negative.");
        if (String.valueOf(studentNumber).length() != 5)
            throw new IllegalArgumentException("Student Number needs to be 5 digits.");
        if ((sem < 1) || (sem > 8))
            throw new IllegalArgumentException("Student semester needs to be between 1-8.");

        this.studentNumber = studentNumber;
        this.firstName = name;

        this.currentSemester = sem;
        if (this.getTotalECs() == 0)
            this.currentSemester = 1;
    }


    /**
     * get the total ECs from all passed courses.
     * @return number of ECs.
     */
    public int getTotalECs() {
        int totalECs = 0;
        for (Course c : this.passedCourses){
            totalECs += c.getEc();
        }

        return totalECs;
    }

    /**
     * adds a passed course to a student. a student can only pass a course once.
     * @param course
     */
    public void addPassedCourse(Course course) {
        this.passedCourses.add(course);
    }

    /**
     * removes a passed course from a student.
     * @param course passed course to remove
     * @throws NotFoundException when course is not found
     */
    public void removePassedCourse(Course course) throws NotFoundException {
        for (Course c : this.passedCourses) {
            if (c.getCode() == course.getCode())
                this.passedCourses.remove(c);
        }
    }


    /******************************************************
     *
     *   GETTERS/SETTERS CODE IS GENERATED BY INTELLIJ,
     *   AND UNTOUCHED BY PEOPLE.
     *   THE BEHAVIOUR OF THIS CODE DOES NOT HAVE TO BE TESTED.
     *
     ********************************************************/

    // TODO: when needed.

    /******************************************************
     *
     *   OTHER CODE GENERATED BY INTELLIJ,
     *   BUT BASED ON INPUT OF A PROGRAMMER.
     *   THE BEHAVIOUR OF THIS CODE HAS TO BE TESTED.
     *   (but not present to keep demo code short)
     *
     ********************************************************/
    // TODO
}
